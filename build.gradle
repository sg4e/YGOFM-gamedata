plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

group = 'moe.maika'
version = '1.1.0'

compileJava {
    sourceCompatibility = '8'
    targetCompatibility = '8'
}

repositories {
    mavenCentral()
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    useJUnitPlatform()
}

dependencies {
    //unit tests
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    //test logging
    testImplementation 'org.apache.logging.log4j:log4j-api:2.22.1'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.22.1'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl', version: '2.22.1'
}

java {
    withJavadocJar()
    withSourcesJar()
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt

/*
How to actually publish on Maven Central:

Sonatype, which allows OSS projects to publish to Maven Central, recently discontinued their old service
and replaced it with a completely new one. The new one is required for all new projects registered
after a certain date. All of the old tooling uses the old service, and how to actually publish
your artifacts is extremely obtuse. The unofficial plugins to publish to Sonatype either didn't
work or I couldn't figure them out. Sonatype says gradle support is "on their roadmap", but
didn't think it important enough to roll out before discontinuing the old service. I'll document
how I managed to publish after hours of trial and error, because otherwise I would never figure
it out again. Also, as I sidenote, I originally publish to GitHub Packages, which was a lot easier,
but in the year 2024 they still don't have a way to download artifacts without a token, so I
find that makes their service completely useless for OSS.

1. Put signing.keyId, signing.password, and signing.secretKeyRingFile in your gradle.properties.
2. Run publishToMavenLocal. In your ~/.m2/repository, you should see your artifacts. You'll find
inside the .asc signature files, but the checksum files will be missing. Sonatype will reject
your artifacts without these. Maven doesn't generate these for local for some reason, and the gradle
people will tell you since that's what maven does, that's what gradle should do. I wrote a script
that generates them and commit it to the repo.
3. Generate your checksum files (.md5 and .sha1).
4. Sonatype insists on this directory structure:
moe/maika/ygofm-gamedata/[version]/ygofm-gamedata-[version].jar (i.e. all your stuff)
so replicate that directory structure.
5. If you didn't submit your signing key to a key server, do that now.
6. Go to https://central.sonatype.com/publishing/deployments and upload it.
7. Hope that it passes verification lol.
*/

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'ygofm-gamedata'
                description = 'API and simulation suite for game data of Yu-Gi-Oh! Forbidden Memories'
                url = 'https://github.com/sg4e/YGOFM-gamedata'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sg4e'
                        name = 'sg4e'
                    }
                }
                scm {
                    url = 'https://github.com/sg4e/YGOFM-gamedata'
                    connection = 'scm:git://github.com/sg4e/YGOFM-gamedata.git'
                    developerConnection = 'scm:git://github.com/sg4e/YGOFM-gamedata.git'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
